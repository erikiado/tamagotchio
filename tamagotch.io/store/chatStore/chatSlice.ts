import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../store'

import { parseChatResponse } from '../../services/utils';
import { 
  chatRequest
} from './chatAPI'

import { displayEditModal } from '../modalStore/modalSlice';

interface ChatContext {
  status: string,
  sidebar: boolean,
  loadingData: boolean,
}

export interface Message {
  human: boolean
  messages: string[]

}
export interface ChatState { 
  error: Error
  display: string
  message: string
  status: string
  context: ChatContext
  chat: {
    status:string
    last_response: string
    input: string
    history: Message[]
  }
}

const initialState: ChatState = {
  display: "none",
  message: "",
  error: {
    message:"", 
    name:""
  },
  status:"none",
  chat: {
    status: "loading",
    last_response: "",
    input: "",
    history: []
  },
  context: {
    sidebar: false,
    loadingData: false,
    status: "none",
  }
}

export const chat = createAsyncThunk(
  'app/chat',
  async (prompt: string) => {
    const response = await chatRequest(prompt)
    // The display we return becomes the `fulfilled` action payload
    return response.answer;
  }
)

export const recipeSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    hideSidebar: (state) => {
      state.context.sidebar = false;
    },
    showSidebar: (state) => {
      state.context.sidebar = true;
    },
    updateChatInput: (state, action: PayloadAction<string>) => {
      state.chat.input = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(chat.pending, (state, { meta }) => {
        state.chat.status = 'loading';
        if(meta.arg && meta.arg !== ""){
          state.chat.history = [...state.chat.history, {human:true, messages:[meta.arg]}];
        }
        state.chat.input = "";
      })
      .addCase(chat.fulfilled, (state, action) => {
        console.log(action);
        state.chat.status = 'idle';
        const message = {human:false, messages:parseChatResponse(action.payload)}
        state.chat.history = [...state.chat.history, message];
      });
  },
})

export const { 
  showSidebar, hideSidebar, updateChatInput
} = recipeSlice.actions

export const selectContext = (state: AppState) => state.app.context
export const selectChat = (state: AppState) => state.app.chat

export default recipeSlice.reducer